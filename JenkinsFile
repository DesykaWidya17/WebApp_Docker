pipeline {
    agent any

    environment {
        NODEJS_HOME = "C:\\Program Files\\nodejs"
        PATH = "${NODEJS_HOME};${env.PATH}"
    }

    stages {
        stage('Checkout SCM') {
            steps {
                echo "📦 Checking out source code..."
                checkout scm
            }
        }

        stage('Install Dependencies') {
            steps {
                echo "📥 Installing npm dependencies..."
                bat '''
                echo Fixing NPM config and increasing timeout...
                "C:\\Program Files\\nodejs\\npm.cmd" config set fetch-retries 5
                "C:\\Program Files\\nodejs\\npm.cmd" config set fetch-retry-mintimeout 20000
                "C:\\Program Files\\nodejs\\npm.cmd" config set fetch-retry-maxtimeout 120000
                "C:\\Program Files\\nodejs\\npm.cmd" config set registry https://registry.npmjs.org/
                echo Installing dependencies...
                "C:\\Program Files\\nodejs\\npm.cmd" ci --no-optional
                '''
            }
        }

        stage('Run Tests') {
            steps {
                echo "🧪 Running tests..."
                bat '"C:\\Program Files\\nodejs\\npm.cmd" test -- --passWithNoTests'
            }
        }

        stage('Build Application') {
            steps {
                echo "🏗️ Building application..."
                bat '"C:\\Program Files\\nodejs\\npm.cmd" run build'
            }
        }

        stage('Build Docker Image') {
            steps {
                echo "🐳 Building Docker image..."
                bat 'docker build -t webapp_docker:latest .'
            }
        }

        stage('Deploy with Docker Compose') {
            steps {
                echo "🚀 Deploying application with Docker Compose..."
                bat '''
                docker-compose down
                docker-compose up -d
                '''
            }
        }

        stage('Health Check') {
            steps {
                echo "🩺 Running health check..."
                bat '''
                docker ps
                curl http://localhost:3000 || echo "⚠️ Health check failed!"
                '''
            }
        }
    }

    post {
        success {
            echo "✅ Pipeline completed successfully!"
        }
        failure {
            echo "❌ Pipeline failed! Check logs for details."
        }
        always {
            echo "🧹 Cleaning up workspace..."
            deleteDir()
        }
    }
}

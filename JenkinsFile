pipeline {
    agent any

    tools {
        nodejs "NodeJS_25" // Sesuaikan dengan nama NodeJS installation di Jenkins
    }

    environment {
        DOCKER_IMAGE = "webapp_docker_image"
        DOCKER_COMPOSE_PATH = "docker-compose.yml"
    }

    stages {
        stage('Declarative: Checkout SCM') {
            steps {
                checkout scm
            }
        }

        stage('Checkout SCM') {
            steps {
                echo '📦 Checking out source code...'
                checkout scm
            }
        }

        stage('Install Dependencies') {
            steps {
                echo '📥 Installing npm dependencies...'
                bat '''
                    echo Fixing NPM config and increasing timeout...
                    npm config set fetch-retries 5
                    npm config set fetch-retry-factor 2
                    npm config set fetch-timeout 120000
                    npm config set fetch-retry-mintimeout 20000
                    npm install
                '''
            }
        }

        stage('Run Tests') {
            steps {
                echo '🧪 Running tests...'
                bat '''
                    set "CI=true"
                    npm test -- --passWithNoTests
                '''
            }
        }

        stage('Build Application') {
            steps {
                echo '🏗️ Building React app...'
                bat '''
                    npm run build
                '''
            }
        }

        stage('Build Docker Image') {
            steps {
                echo '🐳 Building Docker image...'
                bat '''
                    docker build -t %DOCKER_IMAGE% .
                '''
            }
        }

        stage('Deploy with Docker Compose') {
            steps {
                echo '🚀 Deploying with Docker Compose...'
                bat '''
                    docker compose down
                    docker compose up -d
                '''
            }
        }

        stage('Health Check') {
            steps {
                echo '🩺 Checking app health...'
                bat '''
                    curl -f http://localhost:3000 || exit 1
                '''
            }
        }
    }

    post {
        success {
            echo '✅ Pipeline executed successfully!'
        }
        failure {
            echo '❌ Pipeline failed! Check logs for details.'
        }
        always {
            echo '🧹 Cleaning up workspace...'
            deleteDir()
        }
    }
}

pipeline {
    agent any

    environment {
        PATH = "C:\\Program Files\\nodejs;C:\\Program Files\\Docker\\Docker\\resources\\bin;%PATH%"
    }

    stages {
        stage('Checkout') {
            steps {
                echo 'üì¶ Checking out source code...'
                checkout scm
            }
        }

        stage('Install Dependencies') {
            steps {
                bat '''
                    echo ===== CEK VERSI NODE DAN NPM =====
                    node -v
                    npm -v

                    echo ===== INSTALL DEPENDENCIES =====
                    npm cache clean --force
                    npm install

                    echo ===== CEK APAKAH REACT-SCRIPTS TERINSTAL =====
                    npm list react-scripts || npm install react-scripts
                '''
            }
        }

        stage('Run Tests') {
            steps {
                bat '''
                    echo ===== RUNNING TESTS =====
                    set CI=true
                    if exist node_modules\\react-scripts (
                        npx react-scripts test --passWithNoTests
                    ) else (
                        echo React-scripts not found, skipping tests
                    )
                '''
            }
        }

        stage('Build Application') {
            steps {
                bat '''
                    echo ===== BUILDING PROJECT =====
                    npx react-scripts build
                '''
            }
        }

        stage('Build Docker Image') {
            steps {
                bat '''
                    echo ===== BUILDING DOCKER IMAGE =====
                    docker build -t webapp-docker:latest .
                '''
            }
        }

        stage('Deploy with Docker Compose') {
            steps {
                bat '''
                    echo ===== DEPLOYING APPLICATION =====
                    docker compose down
                    docker compose up -d
                '''
            }
        }

        stage('Health Check') {
            steps {
                bat '''
                    echo ===== CHECKING CONTAINER STATUS =====
                    docker ps
                '''
            }
        }
    }

    post {
        success {
            echo '‚úÖ Build and Deploy succeeded!'
        }
        failure {
            echo '‚ùå Pipeline failed! Check logs for details.'
        }
        always {
            echo 'üßπ Cleaning up workspace...'
            deleteDir()
        }
    }
}

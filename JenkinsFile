pipeline {
    agent any

    environment {
        DOCKER_IMAGE = 'cc-webapp'
        DOCKER_TAG = "${BUILD_NUMBER}"
        CONTAINER_NAME = 'simple-web-app'
        CI = 'true'
    }

    stages {

        stage('Checkout') {
            steps {
                echo '📦 Checking out source code...'
                checkout scm
            }
        }

        stage('Install Dependencies') {
            steps {
                echo '📥 Installing npm dependencies...'
                bat """
                    npm ci --cache C:\\tmp\\.npm --no-optional
                """
            }
        }

        stage('Run Tests') {
            steps {
                echo '🧪 Running tests...'
                bat """
                    npm run test:ci || exit 0
                """
            }
        }

        stage('Build Application') {
            steps {
                echo '🏗️ Building React application...'
                bat 'npm run build'
                echo '✅ Build completed successfully!'
            }
        }

        stage('Build Docker Image') {
            steps {
                echo '🐳 Testing Docker access...'
                bat 'docker version'

                echo '🏗️ Building Docker image on host...'
                bat """
                    docker build -t %DOCKER_IMAGE%:%DOCKER_TAG% .
                    docker tag %DOCKER_IMAGE%:%DOCKER_TAG% %DOCKER_IMAGE%:latest
                """
                echo "✅ Docker image built successfully: %DOCKER_IMAGE%:%DOCKER_TAG%"
            }
        }

        stage('Deploy with Docker Compose') {
            steps {
                echo '🚀 Deploying application...'
                bat """
                    docker stop %CONTAINER_NAME% || exit 0
                    docker rm -f %CONTAINER_NAME% || exit 0
                    docker-compose down --remove-orphans || exit 0
                    docker-compose up -d --build
                """
                echo '✅ Application deployed successfully!'
            }
        }

        stage('Health Check') {
            steps {
                echo '🩺 Performing health check...'
                bat """
                    timeout /t 10
                    curl -f http://localhost:3000 --max-time 30
                """
                echo '✅ Health check passed! Application is running on port 3000'
            }
        }
    }

    post {
        always {
            echo '🧹 Cleaning up workspace...'
            bat 'rmdir /s /q "%WORKSPACE%"'
        }
        success {
            echo '🎉 Pipeline completed successfully!'
        }
        failure {
            echo '❌ Pipeline failed! Check logs for details.'
        }
    }
}
